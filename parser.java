
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import symbTable.*;
import tipo.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\010\005" +
    "\000\002\010\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\005\005\000\002" +
    "\006\005\000\002\006\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\005\000\002\013\006\000" +
    "\002\013\010\000\002\027\003\000\002\014\006\000\002" +
    "\007\004\000\002\007\002\000\002\015\004\000\002\015" +
    "\003\000\002\016\006\000\002\017\006\000\002\020\003" +
    "\000\002\020\005\000\002\026\003\000\002\026\005\000" +
    "\002\030\003\000\002\030\005\000\002\031\003\000\002" +
    "\023\004\000\002\023\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\005\000\002\022\004\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\127\000\004\016\005\001\002\000\004\002\131\001" +
    "\002\000\004\040\006\001\002\000\004\034\007\001\002" +
    "\000\004\040\011\001\002\000\006\023\ufffe\034\ufffe\001" +
    "\002\000\010\026\ufffb\035\ufffb\036\ufffb\001\002\000\006" +
    "\035\123\036\120\001\002\000\006\023\015\034\016\001" +
    "\002\000\004\002\000\001\002\000\020\004\031\007\uffe7" +
    "\010\022\012\020\013\033\023\015\040\034\001\002\000" +
    "\004\040\011\001\002\000\006\023\uffff\034\uffff\001\002" +
    "\000\004\025\116\001\002\000\012\006\uffee\011\uffee\024" +
    "\uffee\034\uffee\001\002\000\024\014\062\015\053\025\057" +
    "\027\045\030\056\031\065\032\046\037\064\040\034\001" +
    "\002\000\012\006\ufff2\011\ufff2\024\ufff2\034\ufff2\001\002" +
    "\000\012\006\uffef\011\uffef\024\uffef\034\uffef\001\002\000" +
    "\010\011\ufff4\024\ufff4\034\ufff4\001\002\000\012\006\ufff3" +
    "\011\ufff3\024\ufff3\034\ufff3\001\002\000\012\006\ufff1\011" +
    "\ufff1\024\ufff1\034\ufff1\001\002\000\012\006\ufff0\011\ufff0" +
    "\024\ufff0\034\ufff0\001\002\000\024\014\062\015\053\025" +
    "\057\027\045\030\056\031\065\032\046\037\064\040\034" +
    "\001\002\000\004\033\106\001\002\000\004\025\100\001" +
    "\002\000\030\005\uffcf\006\uffcf\007\uffcf\011\uffcf\024\uffcf" +
    "\026\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\041\uffcf\001" +
    "\002\000\006\024\077\034\041\001\002\000\004\007\037" +
    "\001\002\000\020\004\031\007\uffe7\010\022\012\020\013" +
    "\033\023\015\040\034\001\002\000\010\011\044\024\043" +
    "\034\041\001\002\000\020\004\031\007\uffe7\010\022\012" +
    "\020\013\033\023\015\040\034\001\002\000\012\006\uffe9" +
    "\011\uffe9\024\uffe9\034\uffe9\001\002\000\012\006\uffe5\011" +
    "\uffe5\024\uffe5\034\uffe5\001\002\000\024\014\062\015\053" +
    "\025\057\027\045\030\056\031\065\032\046\037\064\040" +
    "\034\001\002\000\026\005\uffd5\006\uffd5\007\uffd5\011\uffd5" +
    "\024\uffd5\026\uffd5\032\uffd5\034\uffd5\036\uffd5\041\uffd5\001" +
    "\002\000\022\014\062\015\053\025\057\027\045\030\056" +
    "\031\065\032\046\040\034\001\002\000\016\005\uffea\006" +
    "\uffea\007\uffea\011\uffea\024\uffea\034\uffea\001\002\000\026" +
    "\005\uffd8\006\uffd8\007\uffd8\011\uffd8\024\uffd8\026\uffd8\032" +
    "\uffd8\034\uffd8\036\uffd8\041\uffd8\001\002\000\026\005\uffd9" +
    "\006\uffd9\007\uffd9\011\uffd9\024\uffd9\026\uffd9\032\uffd9\034" +
    "\uffd9\036\uffd9\041\uffd9\001\002\000\026\005\uffd2\006\uffd2" +
    "\007\uffd2\011\uffd2\024\uffd2\026\uffd2\032\uffd2\034\uffd2\036" +
    "\uffd2\041\uffd2\001\002\000\026\005\uffd0\006\uffd0\007\uffd0" +
    "\011\uffd0\024\uffd0\026\uffd0\032\uffd0\034\uffd0\036\uffd0\041" +
    "\uffd0\001\002\000\026\005\uffe0\006\uffe0\007\uffe0\011\uffe0" +
    "\024\uffe0\026\uffe0\032\072\034\uffe0\036\uffe0\041\071\001" +
    "\002\000\012\006\uffe6\011\uffe6\024\uffe6\034\uffe6\001\002" +
    "\000\026\005\uffd4\006\uffd4\007\uffd4\011\uffd4\024\uffd4\026" +
    "\uffd4\032\uffd4\034\uffd4\036\uffd4\041\uffd4\001\002\000\024" +
    "\014\062\015\053\025\057\027\045\030\056\031\065\032" +
    "\046\037\064\040\034\001\002\000\026\005\uffda\006\uffda" +
    "\007\uffda\011\uffda\024\uffda\026\uffda\032\uffda\034\uffda\036" +
    "\uffda\041\uffda\001\002\000\026\005\uffde\006\uffde\007\uffde" +
    "\011\uffde\024\uffde\026\uffde\032\uffde\034\uffde\036\uffde\041" +
    "\uffde\001\002\000\026\005\uffd1\006\uffd1\007\uffd1\011\uffd1" +
    "\024\uffd1\026\uffd1\032\uffd1\034\uffd1\036\uffd1\041\uffd1\001" +
    "\002\000\026\005\uffdc\006\uffdc\007\uffdc\011\uffdc\024\uffdc" +
    "\026\uffdc\032\uffdc\034\uffdc\036\uffdc\041\uffdc\001\002\000" +
    "\022\014\062\015\053\025\057\027\045\030\056\031\065" +
    "\032\046\040\034\001\002\000\026\005\uffd3\006\uffd3\007" +
    "\uffd3\011\uffd3\024\uffd3\026\uffd3\032\uffd3\034\uffd3\036\uffd3" +
    "\041\uffd3\001\002\000\026\005\uffdb\006\uffdb\007\uffdb\011" +
    "\uffdb\024\uffdb\026\uffdb\032\uffdb\034\uffdb\036\uffdb\041\uffdb" +
    "\001\002\000\004\026\070\001\002\000\026\005\uffd7\006" +
    "\uffd7\007\uffd7\011\uffd7\024\uffd7\026\uffd7\032\uffd7\034\uffd7" +
    "\036\uffd7\041\uffd7\001\002\000\024\014\062\015\053\025" +
    "\057\027\045\030\056\031\065\032\046\037\064\040\034" +
    "\001\002\000\024\014\062\015\053\025\057\027\045\030" +
    "\056\031\065\032\046\037\064\040\034\001\002\000\024" +
    "\005\uffdf\006\uffdf\007\uffdf\011\uffdf\024\uffdf\026\uffdf\034" +
    "\uffdf\036\uffdf\041\071\001\002\000\026\005\uffdd\006\uffdd" +
    "\007\uffdd\011\uffdd\024\uffdd\026\uffdd\032\uffdd\034\uffdd\036" +
    "\uffdd\041\uffdd\001\002\000\026\005\uffd6\006\uffd6\007\uffd6" +
    "\011\uffd6\024\uffd6\026\uffd6\032\uffd6\034\uffd6\036\uffd6\041" +
    "\uffd6\001\002\000\010\011\ufff5\024\ufff5\034\ufff5\001\002" +
    "\000\014\002\ufff6\006\ufff6\011\ufff6\024\ufff6\034\ufff6\001" +
    "\002\000\024\014\062\015\053\025\057\027\045\030\056" +
    "\031\065\032\046\037\064\040\034\001\002\000\006\026" +
    "\uffe2\036\uffe2\001\002\000\006\026\104\036\103\001\002" +
    "\000\024\014\062\015\053\025\057\027\045\030\056\031" +
    "\065\032\046\037\064\040\034\001\002\000\012\006\uffe3" +
    "\011\uffe3\024\uffe3\034\uffe3\001\002\000\006\026\uffe1\036" +
    "\uffe1\001\002\000\024\014\062\015\053\025\057\027\045" +
    "\030\056\031\065\032\046\037\064\040\034\001\002\000" +
    "\012\006\uffed\011\uffed\024\uffed\034\uffed\001\002\000\004" +
    "\005\111\001\002\000\020\004\031\007\uffe7\010\022\012" +
    "\020\013\033\023\015\040\034\001\002\000\012\006\113" +
    "\011\uffec\024\uffec\034\uffec\001\002\000\020\004\031\007" +
    "\uffe7\010\022\012\020\013\033\023\015\040\034\001\002" +
    "\000\012\006\uffeb\011\uffeb\024\uffeb\034\uffeb\001\002\000" +
    "\004\007\uffe8\001\002\000\004\040\011\001\002\000\006" +
    "\026\121\036\120\001\002\000\004\040\122\001\002\000" +
    "\012\006\uffe4\011\uffe4\024\uffe4\034\uffe4\001\002\000\010" +
    "\026\ufffc\035\ufffc\036\ufffc\001\002\000\012\017\124\020" +
    "\125\021\127\022\130\001\002\000\006\023\ufffa\034\ufffa" +
    "\001\002\000\006\023\ufff9\034\ufff9\001\002\000\006\023" +
    "\ufffd\034\ufffd\001\002\000\006\023\ufff8\034\ufff8\001\002" +
    "\000\006\023\ufff7\034\ufff7\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\127\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\012\004\007" +
    "\010\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\013\001\001\000\002\001\001" +
    "\000\026\005\020\006\034\007\035\011\024\012\025\013" +
    "\022\014\026\016\027\017\023\021\031\001\001\000\006" +
    "\004\016\010\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\021\050\022\057\023\062" +
    "\024\047\025\051\026\046\027\114\030\053\031\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\021\050\022\057\023\062\024\047\025\051\026\046" +
    "\027\107\030\053\031\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\005\020\006\037\007\035\011\024\012" +
    "\025\013\022\014\026\016\027\017\023\021\031\001\001" +
    "\000\004\015\041\001\001\000\024\005\020\007\035\011" +
    "\075\012\025\013\022\014\026\016\027\017\023\021\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\021" +
    "\050\022\057\023\062\024\047\025\051\026\046\027\054" +
    "\030\053\031\060\001\001\000\002\001\001\000\012\021" +
    "\050\022\074\024\047\025\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\050\022\057\023\062\024\047\025" +
    "\051\026\066\030\053\031\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\021\050\022\065\024\047\025\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\021\050\022\057\023\062\024\047\025\051" +
    "\031\073\001\001\000\020\021\050\022\057\023\062\024" +
    "\047\025\051\030\072\031\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\020\101\021\050\022\057\023\062" +
    "\024\047\025\051\026\100\030\053\031\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\050\022\057" +
    "\023\062\024\047\025\051\026\104\030\053\031\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\050" +
    "\022\057\023\062\024\047\025\051\026\106\030\053\031" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\020\007\035\011\111\012\025\013\022\014\026\016" +
    "\027\017\023\021\031\001\001\000\002\001\001\000\024" +
    "\005\020\007\035\011\113\012\025\013\022\014\026\016" +
    "\027\017\023\021\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	TabelaDeSimbolos.inicializa();
	Tipo.criaTipos();

    }



    public void report_error(String message, Object info)  {
        System.out.println("Warning - " + message);
    }

    public void report_fatal_error(String message, Object info)  {
        System.out.println("Error - " + message);
        System.exit(-1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  private HashMap<String, Symbol> table = new HashMap<String, Symbol>();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= PROGRAM IDENTIFIER SEMI decl_list compound_stmt
            {
              Object RESULT =null;

  parser.code.append("\t HALT \n\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl_list SEMI decl
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= decl
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= ident_list COLON type
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tp = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

  for(String id : il){
    if(! TabelaDeSimbolos.inserirVariavel(id.toLowerCase(), new Simbolo(id, tp))){
      parser.sem_error(id, "variavel ja existe");
    }
  }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ident_list ::= ident_list COMMA IDENTIFIER
            {
              List<String> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

  il.add(id.toLowerCase());
  RESULT = il;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ident_list ::= IDENTIFIER
            {
              List<String> RESULT =null;

  List<String> il = new ArrayList<String>();
  RESULT = il;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= INTEGER
            {
              Tipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type ::= REAL
            {
              Tipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= BOOLEAN
            {
              Tipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= CHAR
            {
              Tipo RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // compound_stmt ::= BEGIN stmt_list END
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_list ::= stmt_list SEMI stmt
            {
              List<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_list ::= stmt
            {
              List<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= assign_stmt
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= if_stmt
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= loop_stmt
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= read_stmt
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= write_stmt
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= compound_stmt
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assign_stmt ::= identifier ASSIGN expr
            {
              Object RESULT =null;
		int tvaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tvaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp tva = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object assign = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

  if(! tva.tipo.getVal().equals(texp.tipo.getVal())) {
   	if(! texp.tipo.getVal().equals("error") && ! tva.tipo.getVal().equals("error")) {
   		if(! (tva.tipo.getVal().equals("real") && texp.tipo.getVal().equals("integer"))) {
   				parser.sem_error(tva.tipo.getVal(), "cannot convert from "+ texp.tipo.getVal() + " to ");
   				RESULT = Tipo.getTipo(Tipo.ERRO);
   		}
   		else {
				parser.code.append("\t ST "+tva.code+" , "+texp.code +"\n");
        RESULT = Tipo.getTipo(Tipo.TIPO_VOID);
			}
		}
   }
   else {
    parser.code.append("\t ST "+tva.code+" , "+texp.code +"\n");
    RESULT = Tipo.getTipo(Tipo.TIPO_VOID);
   }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stmt ::= IF cond THEN stmt
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_stmt ::= IF cond THEN stmt ELSE stmt
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cond ::= expr
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

  if(exp != null) {
		if(! exp.tipo.getVal().equals("boolean")) {
			if(! exp.tipo.getVal().equals("error"))
				parser.sem_error(exp.tipo.getVal(), "cannot convert to boolean ");
	 		RESULT = new Exp(Tipo.getTipo(Tipo.ERRO), "");
		}
		else {
			RESULT = new Exp(exp.tipo, exp.code);
		}
	}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // loop_stmt ::= stmt_prefix DO stmt_list stmt_suffix
            {
              Object RESULT =null;
		int wdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<String> wd = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

               parser.code.append("\t BR "+wd.get(0)+"\n");
               parser.code.append(wd.get(1)+":\n");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt_prefix ::= WHILE cond
            {
              List<String> RESULT =null;
		int beleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int beright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp be = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

							String lbl1 = "", lblFalse = "";

							labels.add(labels.size()+1);
							lbl1 = "$L"+labels.size();

							parser.code.append(lbl1+":\n");
							parser.code.append("\t LD R0 , "+be.code+"\n");
							parser.code.append("\t SUB R0 , R0 , 1\n");

							labels.add(labels.size()+1);
							lblFalse = "$L"+labels.size();

							parser.code.append("\t BLTZ R0 , "+lblFalse+"\n");

							List<String> whileArgs = new ArrayList <String> ();
							whileArgs.add(lbl1);
							whileArgs.add(lblFalse);

							RESULT = whileArgs;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_prefix",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt_prefix ::=
            {
              List<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_prefix",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt_suffix ::= UNTIL cond
            {
              Object RESULT =null;

              String lbl1 = "", lblFalse = "";

              labels.add(labels.size()+1);
              lbl1 = "$L"+labels.size();

              parser.code.append(lbl1+":\n");
              parser.code.append("\t LD R0 , "+be.code+"\n");
              parser.code.append("\t SUB R0 , R0 , 1\n");

              labels.add(labels.size()+1);
              lblFalse = "$L"+labels.size();

              parser.code.append("\t BLTZ R0 , "+lblFalse+"\n");

              List<String> whileArgs = new ArrayList <String> ();
              whileArgs.add(lbl1);
              whileArgs.add(lblFalse);

              RESULT = whileArgs;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_suffix",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt_suffix ::= END
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_suffix",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // read_stmt ::= READ LEFT ident_list RIGHT
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // write_stmt ::= WRITE LEFT expr_list RIGHT
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_list ::= expr
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_list ::= expr_list COMMA expr
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= simple_expr
            {
              Exp RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp se = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp(se.tipo, se.code);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= simple_expr RELOP simple_expr
            {
              Exp RESULT =null;
		 RESULT = new Exp(Tipo.getTipo(Tipo.BOOLEAN), "");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_expr ::= term
            {
              Exp RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp te = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

									RESULT = new Exp(te.tipo, te.code, te.isConstant);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_expr ::= simple_expr ADDOP term
            {
              Exp RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp se = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp te = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

   						if(ad != null) {
   							if(ad.toLowerCase().equals("or")) {
   								if(!(se.tipo.getVal().equals("boolean") && te.tipo.getVal().equals("boolean"))) {
   									parser.sem_error(se.tipo.getVal() + ", " + te.tipo.getVal(), "The operator OR is undefined for the argument types ");
   									RESULT = new Exp(Tipo.getTipo(Tipo.ERRO),"");
   								}
   								else {
									if(! "R1".equals(se.code))
										parser.code.append("\t LD R1 , "+se.code+"\n");
									se.code = "R1";
									parser.code.append("\t OR "+se.code+" , "+se.code+" , "+te.code+"\n");
   									RESULT = new Exp(Tipo.getTipo(Tipo.BOOLEAN), se.code);
   								}
   							}
   							else if(ad.toLowerCase().equals("-") || ad.toLowerCase().equals("+")) {
   								if((se.tipo.getVal().equals("integer") || se.tipo.getVal().equals("real")) &&
   								  (te.tipo.getVal().equals("integer") || te.tipo.getVal().equals("real"))) {

									String op = assembOp(ad.toLowerCase());
									if(se.isConstant) {
										parser.code.append("\t "+op+" R1 , "+se.code+" , "+te.code+"\n");
										se.code = "R1";
									}
									else {
										parser.code.append("\t "+op+" "+se.code+" , "+se.code+" , "+te.code+"\n");
									}
   									RESULT = new Exp(Tipo.maximo(se.tipo, te.tipo), se.code);
   								}
   								else if((se.tipo.getVal().equals("char") || se.tipo.getVal().equals("string")) &&
   								  (te.tipo.getVal().equals("char") || te.tipo.getVal().equals("string"))) {
   									RESULT = new Exp(Tipo.maximo(se.tipo, te.tipo), "?");
   								}
   								else {
   									parser.sem_error(se.tipo.getVal() + ", " + te.tipo.getVal(), "The operator "+ad+" is undefined for the argument types ");
   									RESULT = new Exp(Tipo.getTipo(Tipo.ERRO), "");
   								}
   							}

   						}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // term ::= factor_a
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exp(f.tipo, f.code, f.isConstant); |
         term:se MULOP:ad factor_a:te
         {:
   						if(ad != null) {
   							if(ad.toLowerCase().equals("and")) {
   								if(!(se.tipo.getVal().equals("boolean") && te.tipo.getVal().equals("boolean"))) {
   									parser.sem_error(se.tipo.getVal() + ", " + te.tipo.getVal(), "The operator AND is undefined for the argument types ");
   									RESULT = new Exp(Tipo.getTipo(Tipo.ERRO), "");
   								}
   								else {
									if(! "R1".equals(se.code))
										parser.code.append("\t LD R1 , "+se.code+"\n");
									se.code = "R1";
									parser.code.append("\t AND "+se.code+" , "+se.code+" , "+te.code+"\n");
   									RESULT = new Exp(Tipo.getTipo(Tipo.BOOLEAN), se.code);
   								}
   							}
   							else if(ad.toLowerCase().equals("*") || ad.toLowerCase().equals("/")) {
   								if((se.tipo.getVal().equals("integer") || se.tipo.getVal().equals("real")) &&
   								  (te.tipo.getVal().equals("integer") || te.tipo.getVal().equals("real"))) {
   									String op = assembOp(ad.toLowerCase());
									if(se.isConstant) {
										parser.code.append("\t "+op+" R1 , "+se.code+" , "+te.code+"\n");
										se.code = "R1";
									}
									else {
										parser.code.append("\t "+op+" "+se.code+" , "+se.code+" , "+te.code+"\n");
									}
   									RESULT = new Exp(Tipo.maximo(se.tipo, te.tipo), se.code);
   								}
   								else {
   									parser.sem_error(se.tipo.getVal() + ", " + te.tipo.getVal(), "The operator "+ad+" is undefined for the argument types ");
   									RESULT = new Exp(Tipo.getTipo(Tipo.ERRO),"");
   								}
   							}
   							else if(ad.toLowerCase().equals("mod") || ad.toLowerCase().equals("div")) {
   								if(se.tipo.getVal().equals("integer") && te.tipo.getVal().equals("integer")) {
									String op = assembOp(ad.toLowerCase());
									if(se.isConstant) {
										parser.code.append("\t "+op+" R1 , "+se.code+" , "+te.code+"\n");
										se.code = "R1";
									}
									else {
										parser.code.append("\t "+op+" "+se.code+" , "+se.code+" , "+te.code+"\n");
									}
   									RESULT = new Exp(Tipo.getTipo(Tipo.INTEGER), se.code);
   								}
   								else {
   									parser.sem_error(se.tipo.getVal() + ", " + te.tipo.getVal(), "The operator "+ad+" is undefined for the argument types ");
   									RESULT = new Exp(Tipo.getTipo(Tipo.ERRO),"");
   								}
   							}
   						}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor_a ::= MINUS factor
            {
              Exp RESULT =null;
		int snleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int snright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(sn.toLowerCase().equals("-")) {
   					if(! (f.tipo.getVal().equals("integer") || f.tipo.getVal().equals("real"))) {
   						parser.sem_error(f.tipo.getVal(), "The operator - is undefined for the expression type");
   						RESULT = new Exp(Tipo.getTipo(Tipo.ERRO), "");
   					}
   					else {
   						RESULT = f;
   					}
   				}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_a",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor_a ::= factor
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

          if(! (f.tipo.getVal().equals("integer") || f.tipo.getVal().equals("real")
   					|| f.tipo.getVal().equals("string") || f.tipo.getVal().equals("char"))) {
   						parser.sem_error(f.tipo.getVal(), "The operator + is undefined for the expression type");
   						RESULT = new Exp(Tipo.getTipo(Tipo.ERRO), "");
   					}
   					else {
   						RESULT = f;
   					}

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor_a",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= identifier
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp id = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

  RESULT = id;


              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= constant
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= LEFT expr RIGHT
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= RELOP factor
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // constant ::= INTEGER_CONSTANT
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // constant ::= REAL_CONSTANT
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constant ::= CHAR_CONSTANT
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // constant ::= boolean_constant
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boolean_constant ::= FALSE
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_constant",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boolean_constant ::= TRUE
            {
              Exp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_constant",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // identifier ::= IDENTIFIER
            {
              Exp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

  Simbolo t = null;
    if((t = TabelaDeSimbolos.get(id.toLowerCase())) == null) {
        parser.semantic_error(id.toString(), "unknow name");
        RESULT = new Exp(Tipo.getTipo(Tipo.ERRO), "");
    } else {
        RESULT = new Exp(t.getTipo(), id.toString());
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
